{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww22500\viewh14680\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 -- ========================================\
-- \uc0\u55357 \u56550  Starbucks Rewards Data Pipeline - Part 3\
-- Customer Segmentation and Spend Analysis\
-- Author: Oliver Xiao\
-- Date: May 2025\
-- ========================================\
\
-- ----------------------------------------\
-- 3a: Top 5 Customers by Total Spend\
-- ----------------------------------------\
\
SELECT \
    person_id,\
    '$ ' || SUM(value:amount::FLOAT) AS total_spend,\
    COUNT(value:amount::FLOAT) AS transaction_count,\
    '$ ' || ROUND(SUM(value:amount::FLOAT) / COUNT(value:amount::FLOAT), 2) AS avg_transaction_amount\
FROM merged_data\
WHERE value:amount IS NOT NULL\
GROUP BY person_id\
ORDER BY total_spend DESC\
LIMIT 5;\
\
-- ----------------------------------------\
-- 3b: Customer Metrics by Age Group\
-- ----------------------------------------\
\
-- Step 1: Get transaction count per person\
WITH customer_transaction AS (\
    SELECT\
        person_id,\
        age_group,\
        COUNT(CASE WHEN event = 'transaction' THEN 1 END) AS transaction_count\
    FROM merged_data\
    GROUP BY age_group, person_id\
),\
\
-- Step 2: Filter for very active customers (3+ transactions)\
active_customer AS (\
    SELECT \
        person_id,\
        age_group\
    FROM customer_transaction\
    WHERE transaction_count >= 3\
)\
\
-- Step 3: Aggregate full age group metrics\
SELECT \
    t1.age_group,\
    COUNT(DISTINCT t1.person_id) AS customer_count,\
    '$ ' || ROUND(AVG(income), 2) AS average_income,\
    '$ ' || SUM(value:amount::FLOAT) AS total_spend,\
    COUNT(CASE WHEN event = 'transaction' THEN 1 END) AS transaction_count,\
    COUNT(CASE WHEN event = 'offer received' THEN 1 END) AS offers_received,\
    COUNT(CASE WHEN event = 'offer completed' THEN 1 END) AS offers_completed,\
    SUM(value:reward::FLOAT) AS total_reward_earned,\
    \
    -- Derived per-customer and per-transaction metrics\
    '$ ' || ROUND(SUM(value:amount::FLOAT) / NULLIF(COUNT(DISTINCT t1.person_id), 0), 2) AS avg_spent_per_customer,\
    '$ ' || ROUND(SUM(value:amount::FLOAT) / NULLIF(COUNT(value:amount::FLOAT), 0), 2) AS avg_spent_per_transaction,\
    \
    ROUND(COUNT(CASE WHEN event = 'offer received' THEN 1 END) / NULLIF(COUNT(DISTINCT t1.person_id), 0), 2) AS avg_offers_per_customer,\
    ROUND(COUNT(CASE WHEN event = 'offer completed' THEN 1 END) / NULLIF(COUNT(DISTINCT t1.person_id), 0), 2) AS avg_offers_completed_per_customer,\
    ROUND(SUM(value:reward::FLOAT) / NULLIF(COUNT(DISTINCT t1.person_id), 0), 2) AS avg_reward_earned_per_customer,\
    ROUND(SUM(CASE WHEN difficulty IS NOT NULL THEN difficulty ELSE 0 END) / NULLIF(COUNT(DISTINCT t1.person_id), 0), 2) AS avg_difficulty_completed_per_customer,\
    \
    COUNT(DISTINCT t2.person_id) AS very_active_customers\
FROM merged_data AS t1\
LEFT JOIN active_customer AS t2 \
    ON t1.person_id = t2.person_id \
    AND t1.age_group = t2.age_group\
GROUP BY t1.age_group\
ORDER BY t1.age_group;\
}